<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>
    <head>
        <title>SMT-XRAT Help Page</title>
        <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
        <meta name="generator" content="HTML Tidy for Linux/x86 (vers 25 March 2009), see www.w3.org">
        <meta name="author" content="Florian Corzilius">
        <meta name="author" content="Sebastian Junges">
        <meta name="author" content="Ulrich Loup">
        <meta name="keywords" content="SMT-RAT, SMT, Real Arithmetic, Nonlinear, NRA">
        <meta name="description" content="SMT-RAT is a C++ toolbox offering theory solver modules for the development of SMT solvers for nonlinear real arithmetic (NRA).">
        <meta name="robots" content="index">
        <meta name="robots" content="all">
        <link rel="icon" href="http//smtrat.sourceforge.net/favicon.ico" type="image/x-icon">
        <link rel="shortcut icon" href="images/icon.png" type="image/png">
        <style type="text/css">
        </style>
    </head>
    <body style="font-family: sans-serif">
        <center>
            <h1>
                SMT-XRAT
            </h1>
            <h2>
                The <u>S</u>atisfiability&ndash;<u>M</u>odulo&ndash;<u>T</u>heories <u>X</u>&ndash;<u>R</u>eal <u>A</u>rithmetic <u>T</u>oolbox
            </h2>
            <h4>
                Version @PROJECT_VERSION@
            </h4>
            <h2 style="font-weight: 500;">
                Help Page
            </h2>
            <table>
                <tr>
                    <!--
                    <td style="vertical-align: top">
                        <p>
                            <a href="#intro" style="font-weight: bold; font-size: 117%; color: #bd0000">
                                Introduction
                            </a>
                        </p>
                        <p>
                            <a href="#modules" style="font-weight: bold; font-size: 117%; color: #bd0000">
                                Managing Modules
                            </a>
                        </p>
                        <p>
                            <a href="#solvers" style="font-weight: bold; font-size: 117%; color: #bd0000">
                                Managing Solvers
                            </a>
                        </p>
                        <p>
                            <a href="#beyond" style="font-weight: bold; font-size: 117%; color: #bd0000">
                                Beyond this GUI
                            </a>
                        </p>
                    </td>
                    -->
                    <td>
                        <h3><a name="intro">Introduction</a></h3>
                        <p>
                            SMT-RAT is a C++ toolbox offering theory solver modules for the development of SMT solvers for nonlinear real arithmetic (NRA).
                            SMT-XRAT is a graphical user interface (GUI) providing the possibility to manage the SMT-RAT source code in the following way:
                        </p>
                        <ul>
                            <li>Add and remove modules including their respective implementations and entries in the SMT-RAT source.</li>
                            <li>Add and remove solvers in the SMT-RAT source.</li>
                            <li>Modify solving strategies.</li>
                        </ul>
                        <p>
                            What you have to do on your own is the implementation of the modules themselves.
                        </p>
                        <h4>Main window structure</h4>
                        <p>
                            The main window of SMT-XRAT is divided into two main areas, the <em>Modules area</em> on the left and the <em>Solvers area</em> on the right. In addition, there is a menu bar above these areas, which provides the <em>File menu</em> and the <em>Help menu</em>.
                        </p>
                        <p>
                            The Modules area contains a list, showing all modules available, and two buttons. The <em>Add module button</em> activates a dialog prompting the user for the name of the new module. The <em>Remove module button</em> activates a confirmation dialog asking whether the user intends to delete the selected module.
                        </p>
                        <p>
                            The Solvers area contains a combo box showing all solvers available. Below this box, the <em>Strategy pane</em> is located, showing the solving strategy of the currently selected solver. Below this strategy view, there are two buttons, the <em>Add solver button</em> and the <em>Remove solver button</em>, providing the possibilities to add or remove the currently selected solver.
                        </p>
                        <h4>A simple use case</h4>
                        <p>
                            Let us go through an exemplary use case for SMT-XRAT. Assume that you want to build an NRA solver for the use in an SMT solver which uses
                            an external tool <code>NRASolver</code> for solving.
                        </p>
                        <ol>
                            <li>Start SMT-XRAT.</li>
                            <li>Add a new module, e.g. <i>MyModule</i>, in the Modules area of SMT-XRAT. It appears black in the modules list.</li>
                            <li>Write the module changes to source by clicking the menu entry <i>File</i>&rarr;<i>Write module changes</i>. The new module now turns <font color="green">green</font> in the modules list.</li>
                            <li>Add a new solver in the Solvers area of SMT-XRAT.</li>
                            <li>Add the module <i>MyModule</i> to the solver by right-clicking the strategy pane.</li>
                            <li>Write the solver changes to source by clicking the menu entry <i>File</i>&rarr;<i>Write solver changes</i>.</li>
                        </ol>
                        <p>
                            Now the source is already ready to be compiled and the new solver should be available as the library <code>libsmtrat_mysolver</code>.
                            It remains to implement appropriate calls to the external tool <code>NRASolver</code> into the file <code>MyModule.cpp</code> in the sub-folder <code>modules</code>.
                            Some information about this can be found in the section <em>Beyond this GUI</em>.
                        </p>

                        <h3><a name="modules">Managing Modules</a></h3>
                        <p>
                            Module management is reduced to a minimum in this GUI because here the actual solving algorithms are placed, whose structure usually is more involved than able to be designed by graphical means. In general, black entries in the modules list represent modules which are not yet written to the source, and <font color="green">green</font> entries represent modules which are already written to the source. The simple module functions we provide are:
                        <ul>
                            <li>
                                <em>Adding modules:</em> Press the Add modules button. An input dialog pops up where you can type in the name of the new module. Note that only names are valid which are <code>C++</code> identifiers. If you cancel this dialog or type an empty string, nothing will happen.
                            </li>
                            <li>
                                <em>Removing modules:</em> Select a module from the list and press the Remove modules button in order to remove the module. You will be asked for confirmation by a dialog. If, in addition, the module was already present in the source code, an additional safety confirmation is required.
                            </li>
                            <li>
                                <em>Writing module changes:</em> Select <em>Write module changes</em> from the File menu. There will be just one question for confirmation!
                            </li>
                        </ul>
                        <p>
                            After a new module was added and written to the source, the respective files are located in the sub folder <code>modules/</code> and the build system is already extended to correctly compile and bind the new module. The new files can now be implemented with the respective solving procedure.
                        </p>

                        <h3><a name="solvers">Managing Solvers</a></h3>
                        <p>
                            New solvers and their solving strategies can be designed completely without modifying the source itself.
                        </p>
                        <ul>
                            <li>
                                <em>Adding solvers:</em> Push the Add solver button and enter the name of the new solver in the dialog. Note that the new solver name should be a valid <code>C++</code> identifier. Afterwards, the new solver is selected in the combo box and the strategy pane is empty. The strategy can now be entered by right-clicking the strategy pane. 
                            </li>
                            <li>
                                <em>Removing solvers:</em> Select a solver in the combo box and press the Remove solver button. After confirmation, the selected solver is removed including its strategy. Note that the changes are not written to the source, yet.
                            </li>
                            <li>
                                <em>Modifying the solving strategy:</em> You can add conditions and modules by right-clicking the strategy pane below the solver combo box. The conditions can be added either on an empty pane, or by before or after a condition node itself. The conditions are processed <em>from the top to the bottom</em> &mdash; similar to a bus system in a computer. If a condition is satisfied, the module whose ancestor node the respective condition is, is used to solve the current formula. Modules can be added by clicking on the condition nodes. Currently, we do not support more than one module per condition since this would require parallelization.
                            </li>
                            <li>
                                <em>Writing solver changes:</em> To execute your solver-related modifications in the source, choose <em>Write solver changes</em> from the File menu.
                            </li>
                        </ul>

                        <h3><a name="beyond">Beyond this GUI</a></h3>
                        <p>
                            When all changes are written to the source, the build system should compile all new files and include them in the SMT-RAT library. New solvers are already operational after leaving the SMT-XRAT. New modules, however, do not work on the current formula but only pass back to the strategy. You need to implement the new module header and source files in order to give them a function. Example modules can be found in the <code>modules/</code> folder of the SMT-RAT project.
                        </p>
                </tr>
            </table>
        </center>
    </body>
</html>
